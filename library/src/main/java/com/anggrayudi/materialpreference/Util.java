package com.anggrayudi.materialpreference;

import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.TypedArray;
import android.graphics.drawable.Drawable;
import android.support.annotation.AttrRes;
import android.support.annotation.ColorInt;
import android.support.annotation.ColorRes;
import android.support.annotation.Dimension;
import android.support.annotation.DrawableRes;
import android.support.annotation.IntRange;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.graphics.ColorUtils;
import android.support.v7.content.res.AppCompatResources;
import android.util.DisplayMetrics;
import android.util.TypedValue;

import static android.support.annotation.Dimension.DP;

final class Util {
    public static final int[] DISABLED_STATE_SET = new int[]{-android.R.attr.state_enabled};
    public static final int[] EMPTY_STATE_SET = new int[0];

    public static final int[][] DISABLED_STATE_LIST = new int[][]{
            DISABLED_STATE_SET,
            EMPTY_STATE_SET
    };

    private static final int[] TEMP_ARRAY = new int[1];

    private Util() {
        throw new AssertionError("No instances!");
    }

    @Dimension
    public static float dpToPx(@NonNull Context context, @Dimension(unit = DP) int dp) {
        final DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
        return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, displayMetrics);
    }

    @Dimension
    public static int dpToPxOffset(@NonNull Context context, @Dimension(unit = DP) int dp) {
        return (int) (dpToPx(context, dp));
    }

    @Dimension
    public static int dpToPxSize(@NonNull Context context, @Dimension(unit = DP) int dp) {
        return (int) (0.5f + dpToPx(context, dp));
    }

    public static int resolveResourceId(@NonNull Context context, @AttrRes int attr, int fallback) {
        TEMP_ARRAY[0] = attr;
        TypedArray ta = context.obtainStyledAttributes(TEMP_ARRAY);
        try {
            return ta.getResourceId(0, fallback);
        } finally {
            ta.recycle();
        }
    }

    public static float resolveFloat(@NonNull Context context, @AttrRes int attr, float fallback) {
        TEMP_ARRAY[0] = attr;
        TypedArray ta = context.obtainStyledAttributes(TEMP_ARRAY);
        try {
            return ta.getFloat(0, fallback);
        } finally {
            ta.recycle();
        }
    }

    @NonNull
    public static ColorStateList withDisabled(
            @ColorInt int color, @IntRange(from = 0x0, to = 0xFF) int disabledAlpha) {
        int disabledColor = ColorUtils.setAlphaComponent(color, disabledAlpha);
        return new ColorStateList(DISABLED_STATE_LIST, new int[]{disabledColor, color});
    }

    /**
     * Returns a drawable object associated with a particular resource ID and
     * styled for the current theme.
     *
     * @param resId The desired resource identifier, as generated by the aapt
     *              tool. This integer encodes the package, type, and resource
     *              entry. The value 0 is an invalid identifier.
     * @return An object that can be used to draw this resource, or
     * {@code null} if the resource could not be resolved.
     * @throws android.content.res.Resources.NotFoundException if the given ID
     *                                                         does not exist.
     */
    @Nullable
    public static Drawable getDrawableCompat(
            @NonNull final Context context, @DrawableRes final int resId) {
        return AppCompatResources.getDrawable(context, resId);
    }

    /**
     * Returns a color state list associated with a particular resource ID and
     * styled for the current theme.
     *
     * @param resId The desired resource identifier, as generated by the aapt
     *              tool. This integer encodes the package, type, and resource
     *              entry. The value 0 is an invalid identifier.
     * @return A color state list, or {@code null} if the resource could not be
     * resolved.
     * @throws android.content.res.Resources.NotFoundException if the given ID
     *                                                         does not exist.
     */
    @NonNull
    public static ColorStateList getColorStateListCompat(
            @NonNull final Context context, @ColorRes final int resId) {
        return AppCompatResources.getColorStateList(context, resId);
    }
}
